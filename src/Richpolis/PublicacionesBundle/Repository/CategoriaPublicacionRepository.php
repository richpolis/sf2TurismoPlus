<?php

namespace Richpolis\PublicacionesBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Richpolis\PublicacionesBundle\Entity\CategoriaPublicacion;

/**
 * CategoriaPublicacionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoriaPublicacionRepository extends EntityRepository
{
    public function getMaxPosicion(){
        $em=$this->getEntityManager();
       
        $query=$em->createQuery('
            SELECT MAX(c.position) as value 
            FROM PublicacionesBundle:CategoriaPublicacion c 
            ORDER BY c.position ASC
        ');
        
        $max=$query->getResult();
        return $max[0]['value'];
    }
    
    public function findForSlugConObjetos($slug){
        $em=$this->getEntityManager();
        $query=$em->createQuery('
               SELECT c,p,u,g 
               FROM PublicacionesBundle:CategoriaPublicacion c 
               JOIN c.publicaciones p 
               JOIN p.usuario u 
               JOIN p.galerias g  
               WHERE c.slug = :categoria 
               AND g.isActive = :active 
               ORDER BY p.createdAt, g.position ASC
        ')->setParameters(array('categoria'=> $slug,'active'=>true));
        
        $categorias=$query->getResult();
        if(isset($categorias[0])){
            return $categorias[0];
        }else{
            return null;
        }
    }
    
    public function findConObjetos($id){
        $em=$this->getEntityManager();
        $query=$em->createQuery('
               SELECT c,p,u,g 
               FROM PublicacionesBundle:CategoriaPublicacion c 
               JOIN c.publicaciones p 
               JOIN p.usuario u 
               JOIN p.galerias g  
               WHERE c.id = :categoria 
               AND g.isActive = :active 
               ORDER BY p.createdAt, g.position ASC
        ')->setParameters(array('categoria'=> $id,'active'=>true));
        
        $categorias=$query->getResult();
        if(isset($categorias[0])){
            return $categorias[0];
        }else{
            return null;
        }
    }
    
    public function getCategoriaConGaleriaPorId($categoria_id,$active=true){
        $em=$this->getEntityManager();
        $query=$em->createQuery('
               SELECT c,p,g 
               FROM PublicacionesBundle:CategoriaPublicacion c 
               JOIN c.publicaciones p 
               JOIN p.galerias g 
               WHERE c.id = :categoria 
               AND g.isActive = :active 
               ORDER BY p.position, g.position ASC
        ')->setParameters(array('categoria'=> $categoria_id,'active'=>$active));
        
        $categorias=$query->getResult();
        if(isset($categorias[0])){
            return $categorias[0];
        }else{
            return null;
        }
    }
    
    public function getCategoriaPublicacionEnCarrusel(){
        $em=$this->getEntityManager();
        $query=$em->createQuery('
               SELECT c,p 
               FROM PublicacionesBundle:CategoriaPublicacion c 
               JOIN c.publicaciones p 
               WHERE p.inCarrusel = :enCarrusel 
               ORDER BY p.createdAt DESC
        ')->setParameters(array('enCarrusel'=>true));
        
        $categorias=$query->getResult();
        return $categorias;
    }
    
    public function getCategoriaPublicacionActivas(){
        $em=$this->getEntityManager();
        $query=$em->createQuery('
               SELECT c,p 
               FROM PublicacionesBundle:CategoriaPublicacion c 
               JOIN c.publicaciones p 
               WHERE p.isActive = :active 
               ORDER BY p.createdAt DESC
        ')->setParameters(array('active'=>true));
        
        $categorias=$query->getResult();
        return $categorias;
    }
      
    public function getQueryCategoriasActivas($categoria_id = 0, $categoria_slug = "",$activas=false,$conObjs = true){
        $query= $this->getEntityManager()->createQueryBuilder();
        if($conObjs){
            $query->select('c,p,u,g')
                ->from('Richpolis\PublicacionesBundle\Entity\CategoriaPublicacion', 'c')
                ->leftJoin('c.publicaciones', 'p')
                ->leftJoin('p.usuario', 'u')    
                ->leftJoin('p.galerias', 'g')    
                ->orderBy('c.position', 'ASC')
                ->addOrderBy('p.createdAt', 'DESC'); 
        }else{
            $query->select('c')
                ->from('Richpolis\PublicacionesBundle\Entity\CategoriaPublicacion', 'c')
                ->orderBy('c.position', 'ASC'); 
        }
        if(!$activas){
            $query->andWhere('c.isActive=:active')
                  ->setParameter('active', true);
        }
        if($categoria_id){
            $query->andWhere('c.id=:categoria')
                  ->setParameter('categoria', $categoria_id);
        }
        if(strlen($categoria_slug)>0){
            $query->andWhere('c.slug=:slug')
                  ->setParameter('slug', $categoria_slug);
        }
        return $query->getQuery();
    }
    
    public function getCategoriasActivas($id =0, $slug="",$todas=false,$conObjs=true){
        $query=$this->getQueryCategoriasActivas($id,$slug,$todas,$conObjs);
        return $query->getResult();
    }
    
       
    public function getRegistroUpOrDown(CategoriaPublicacion $categoria,$up=true){
        // $up = true, $up = false is down
        if($up){
            //up
            $query=$this->createQueryBuilder('p')
                    ->where('p.position<:position')
                    ->setParameter('position', $categoria->getPosition())
                    ->orderBy('p.position', 'DESC'); //mayor a menor
        }else{
            //down
            $query=$this->createQueryBuilder('p')
                    ->where('p.position>:position')
                    ->setParameter('position', $categoria->getPosition())
                    ->orderBy('p.position', 'ASC'); //menor a mayor
        }
        
        return $query->getQuery()->setMaxResults(1)->getOneOrNullResult();
    }
}
