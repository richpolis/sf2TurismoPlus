<?php

namespace Richpolis\GaleriasBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * GaleriaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GaleriaRepository extends EntityRepository
{
    public function getMaxPosicion(){
        $em=$this->getEntityManager();
       
        $query=$em->createQuery('
            SELECT MAX(g.position) as value 
            FROM GaleriasBundle:Galeria g 
            ORDER BY g.position ASC
        ');
        
        $max=$query->getResult();
        return $max[0]['value'];
    }
    
    
    public function getGaleriasConPublicacionPorId($publicacion_id,$active=true){
        $em=$this->getEntityManager();
        $query=$em->createQuery('
               SELECT g,p,c 
               FROM GaleriasBundle:Galeria g 
               JOIN g.publicacion p 
               JOIN p.categoria c 
               WHERE g.publicacion = :publicacion 
               AND g.isActive = :active 
               ORDER BY g.position ASC
        ')->setParameters(array('publicacion'=> $publicacion_id,'active'=>$active));
        
        $galerias = $query->getResult();
        return $galerias;
    }
    
    public function findConObjetos($id){
        $em=$this->getEntityManager();
        $query=$em->createQuery('
               SELECT g,p,u,c 
               FROM GaleriasBundle:Galeria g 
               JOIN g.publicacion p 
               JOIN p.usuario u 
               JOIN p.categoria c 
               WHERE g.id = :galeria 
               AND g.isActive = :active 
               ORDER BY g.position ASC
        ')->setParameters(array('galeria'=> $id,'active'=>true));
        
        $galerias = $query->getResult();
        if(isset($galerias[0])){
            return $galerias[0];
        }else{
            return null;
        }
    }
    
    public function findForSlugConObjetos($slug){
        $em=$this->getEntityManager();
        $query=$em->createQuery('
               SELECT g,p,u,c 
               FROM GaleriasBundle:Galeria g 
               JOIN g.publicacion p 
               JOIN p.usuario u 
               JOIN p.categoria c 
               WHERE g.slug = :galeria 
               AND g.isActive = :active 
               ORDER BY g.position ASC
        ')->setParameters(array('galeria'=> $slug,'active'=>true));
        
        $galerias = $query->getResult();
        if(isset($galerias[0])){
            return $galerias[0];
        }else{
            return null;
        }
    }
      
    public function getQueryGaleriasActivas($galeria_id=0,$galeria_slug="",$activas=false,$conPublicaciones = true){
        $query= $this->getEntityManager()->createQueryBuilder();
        if($conPublicaciones){
            $query->select('g,p,u,c')
                ->from('Richpolis\GaleriasBundle\Entity\Galeria', 'g')
                ->leftJoin('g.publicacion', 'p')
                ->leftJoin('p.usuario', 'u')
                ->leftJoin('p.categoria', 'c')    
                ->orderBy('g.position', 'ASC'); 
        }else{
            $query->select('g')
                ->from('Richpolis\GaleriasBundle\Entity\Galeria', 'g')
                ->orderBy('g.position', 'ASC'); 
        }
        if(!$activas){
            $query->andWhere('g.isActive=:active')
                  ->setParameter('active', true);
        }
        if($galeria_id){
            $query->andWhere('g.id=:galeria')
                  ->setParameter('galeria', $galeria_id);
        }
        return $query->getQuery();
    }
    
    public function getGaleriasActivas($id=0,$slug="",$activas=false,$conObjs=true){
        $query=$this->getQueryGaleriasActivas($id,$slug,$activas,$conObjs);
        return $query->getResult();
    }
    
       
    public function getRegistroUpOrDown(Galeria $galeria,$up=true){
        // $up = true, $up = false is down
        if($up){
            //up
            $query=$this->createQueryBuilder('g')
                    ->where('g.position<:position')
                    ->setParameter('position', $galeria->getPosition())
                    ->orderBy('g.position', 'DESC'); //mayor a menor
        }else{
            //down
            $query=$this->createQueryBuilder('g')
                    ->where('g.position>:position')
                    ->setParameter('position', $galeria->getPosition())
                    ->orderBy('g.position', 'ASC'); //menor a mayor
        }
        
        return $query->getQuery()->setMaxResults(1)->getOneOrNullResult();
    }
}
